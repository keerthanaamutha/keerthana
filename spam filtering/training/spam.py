# -*- coding: utf-8 -*-
"""spam.ipynp

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X26gjf1Vx3pnLjWrpKIvqOU39LdOGWZK

OPTIMIZING SPAM FILTERING WITH MACHINE LEARNING

IMPORTING NECESSARY LIBRARIES
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

"""LOAD OUR DATASET"""

df = pd.read_csv("spam_ham_dataset.csv",encoding="latin")
df.head()

"""EDA ON DATASET"""

df.shape

df.ndim

df.size

df.isna().sum()

df.info()

df.head()

df.rename({"v1":"label","v2":"text"},inplace=True,axis=1)

df.tail()

"""LET'S VISUALIZE THE COLUMN LABEL"""

df["label"].value_counts().plot(kind="bar",figsize=(12,6))
plt.xticks(np.arange(2),('Non spam', 'spam'),rotation=0);

"""CLEANING THE TEXT"""

nltk.download("stopwords")

import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

import re
corpus = []
length = len(df)

for i in range(0,length):
  text = re.sub("^[a-zA-Z0-9]"," ",df["text"][i])
  text = text.lower()
  text =text.split()
  pe = PorterStemmer()
  stopword = stopwords.words("english")
  text = [pe.stem(word) for word in text if not word in set (stopword)]
  text = " ".join(text)
  corpus.append(text)

corpus

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=35000)
x = cv.fit_transform(corpus).toarray()

y = pd.get_dummies(df['label'])
y = y.iloc[:, 1].values

"""DUMPING THE CV FOR FUTURE USE"""

import pickle
pickle.dump(cv, open('cv1.pkl', 'wb'))

"""MODELING AND TRAINING"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.20, random_state =1)
##train size 80% and test size 20%

"""CREATING A MODEL USING MULTINOMINAL NAIVEBAYES"""

from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB()

model.fit(x_train, y_train)

"""PREDICTION"""

y_pred=model.predict(x_test)
y_pred

"""EVALUATING MODEL"""

from sklearn.metrics import confusion_matrix,accuracy_score
cm = confusion_matrix(y_test,y_pred)
score = accuracy_score(y_test,y_pred)
print(cm)
print('Accuracy Score Is:- ' ,score*100)

"""SAVING OUR MODEL"""

import pickle
pickle.dump(model, open("spam.pkl","wb"))

"""TEST OUR SAVE MODEL BY LOADING IT AND TESTING ON TEST DATA"""

loaded_model = pickle.load(open("spam.pkl", "rb"))
loaded_model.predict(x_test)
loaded_model.score(x_test,y_test)

"""PREDICTION FOR A NEW EMAIL"""

def new_review(new_review):
  new_review = new_review
  new_review = re.sub('[^a-zA-Z]' ,' ',new_review)
  new_review = new_review.lower()
  new_review = new_review.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  new_review = [ps.stem(word) for word in new_review if not word in   set(all_stopwords)]
  new_review = ' '.join(new_review)
  new_corpus = [new_review]
  new_x_test = cv.transform(new_corpus).toarray()
  new_y_pred = loaded_model.predict(new_x_test)
  return new_y_pred
new_review = new_review(str(input("Enter new review....")))
if new_review[0]==1:
  print("SPAM")
else :
  print("NOT SPAM")

from sklearn.svm import SVC
svm1=SVC(kernel='rbf')
svm1.fit(x_train,y_train)

y_pred4=svm1.predict(x_test)
from sklearn.metrics import accuracy_score
svm_rbf=accuracy_score(y_test,y_pred4)
svm_rbf

svm2=SVC(kernel='sigmoid')
svm2.fit(x_train,y_train)

y_pred5=svm2.predict(x_test)
from sklearn.metrics import accuracy_score
svm_sig=accuracy_score(y_test,y_pred5)
svm_sig

from sklearn.tree import DecisionTreeClassifier 
dt=DecisionTreeClassifier()
dt.fit(x_train,y_train)

y_pred6=dt.predict(x_test)
from sklearn.metrics import accuracy_score
dec_tree=accuracy_score(y_test,y_pred6)
dec_tree

models = pd.DataFrame({
    'Model' : [ ' MultinomialNB','SVM-rbf','SVM-sigmoid','Decision Tree'],
    'Test Score': [ score,svm_rbf,svm_sig,dec_tree,]})
models.sort_values(by='Test Score', ascending=False)